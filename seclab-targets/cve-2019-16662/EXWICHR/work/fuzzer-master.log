[0;36mafl-fuzz [1;97m2.52b[0m by <lcamtuf@google.com>
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 128 CPU cores and 4 runnable tasks (utilization: 3%).[0m
[1;92m[+] [0mTry parallel jobs - see docs/parallel_fuzzing.txt.[0m
[1;94m[*] [0mChecking CPU core loadout...[0m
[1;92m[+] [0mFound a free CPU core, binding to #0.[0m
[1;94m[*] [0mChecking core_pattern...[0m
[1;94m[*] [0mChecking CPU scaling governor...[0m
[1;94m[*] [0mUsing SHMID of '49'...[0m
shm_id=49 , tb[0]=6  0x7f51f55ba000
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mScanning '/p/Witcher/seclab-targets/cve-2019-16662/EXWICHR/work/initial_seeds'...[0m
[1;92m[+] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mLoading extra dictionary from '/p/Witcher/seclab-targets/cve-2019-16662/EXWICHR/work/dict.txt' (level 0)...[0m
[1;92m[+] [0mLoaded 338 extra tokens, size range 3 B to 119 B.[0m
[1;93m[!] [1;97mWARNING: [0mSome tokens are relatively large (119 B) - consider trimming.[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,orig:seed-0'...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
here b4 3604
here after 3604 3605 
fs status= 4 [AFL] Forkserver up
[1;92m[+] [0mAll right - fork server is up.[0m
	child_timeout=0 kill_signal=11, status=11

[1;91m[-] [0mOops, the program crashed with one of the test cases provided. There are
    several possible explanations:

    - The test case causes known crashes under normal working conditions. If
      so, please remove it. The fuzzer should be seeded with interesting
      inputs - but not ones that cause an outright crash.

    - The current memory limit (8.00 GB) is too low for this program, causing
      it to die due to OOM when parsing valid files. To fix this, try
      bumping it up with the -m setting in the command line. If in doubt,
      try something along the lines of:

      ( ulimit -Sv $[8191 << 10]; /path/to/binary [...] <testcase )

      Tip: you can use http://jwilk.net/software/recidivm to quickly
      estimate the required amount of virtual memory for the binary. Also,
      if you are using ASAN, see docs/notes_for_asan.txt.

    - Least likely, there is a horrible bug in the fuzzer. If other options
      fail, poke <lcamtuf@coredump.cx> for troubleshooting tips.
)B[?25h[0m[1;91m
[-] PROGRAM ABORT : [1;97mTest case 'id:000000,orig:seed-0' results in a crash[1;91m
         Location : [0mperform_dry_run(), afl-fuzz.c:3002

