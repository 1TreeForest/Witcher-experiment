[0;36mafl-fuzz [1;97m2.52b[0m by <lcamtuf@google.com>
[1;92m[+] [0mLooks like we're not running on a tty, so I'll be a bit less verbose.[0m
[1;92m[+] [0mYou have 128 CPU cores and 25 runnable tasks (utilization: 20%).[0m
[1;92m[+] [0mTry parallel jobs - see docs/parallel_fuzzing.txt.[0m
[1;93m[!] [1;97mWARNING: [0mSetting binding to 60[0m
[1;94m[*] [0mChecking core_pattern...[0m
[1;94m[*] [0mChecking CPU scaling governor...[0m
[1;94m[*] [0mUsing SHMID of '9'...[0m
shm_id=9 , tb[0]=6  0x7f6ea76aa000
[1;94m[*] [0mSetting up output directories...[0m
[1;94m[*] [0mScanning './EXWICHR/work/initial_seeds'...[0m
[1;92m[+] [0mNo auto-generated dictionary tokens to reuse.[0m
[1;94m[*] [0mCreating hard links for all input files...[0m
[1;94m[*] [0mLoading extra dictionary from './EXWICHR/work/dict.txt' (level 0)...[0m
[1;92m[+] [0mLoaded 246 extra tokens, size range 6 B to 46 B.[0m
[1;93m[!] [1;97mWARNING: [0mSome tokens are relatively large (46 B) - consider trimming.[0m
[1;94m[*] [0mValidating target binary...[0m
[1;94m[*] [0mAttempting dry run with 'id:000000,orig:seed-0'...[0m
[1;94m[*] [0mSpinning up the fork server...[0m
here b4 691879
here after 691879 691880 
fs status= 4 [AFL] Forkserver up
[1;92m[+] [0mAll right - fork server is up.[0m
[1;90m    len = 98, map size = 177, exec speed = 55923 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000001,orig:seed-1'...[0m
[1;90m    len = 52, map size = 167, exec speed = 10052 us
[0m[1;94m[*] [0mAttempting dry run with 'id:000002,orig:seed-2'...[0m
[1;90m    len = 41, map size = 167, exec speed = 8050 us
[0m[1;93m[!] [1;97mWARNING: [0mNo new instrumentation output, test case may be useless.[0m
[1;94m[*] [0mAttempting dry run with 'id:000003,orig:seed-3'...[0m
[1;90m    len = 98, map size = 177, exec speed = 18040 us
[0m[1;93m[!] [1;97mWARNING: [0mNo new instrumentation output, test case may be useless.[0m
[1;92m[+] [0mAll test cases processed.[0m

[1;93m[!] [1;97mWARNING: [0m[1;91mThe target binary is pretty slow! See docs/perf_tips.txt.[0m
[1;93m[!] [1;97mWARNING: [0m[1;91mSome test cases look useless. Consider using a smaller set.[0m
[1;92m[+] [0mHere are some useful stats:

[1;90m    Test case count : [0m2 favored, 0 variable, 4 total
[1;90m       Bitmap range : [0m167 to 177 bits (average: 172.00 bits)
[1;90m        Exec timing : [0m8050 to 55.9k us (average: 23.0k us)
[0m
[1;92m[+] [0mAll set and ready to roll![0m
[1;94m[*] [0mEntering queue cycle 1.[0m
[1;94m[*] [0mFuzzing test case #2 (4 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #3 (5 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #5 (7 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #6 (8 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #8 (10 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mEntering queue cycle 2.[0m
[1;94m[*] [0mFuzzing test case #2 (11 total, 0 uniq crashes found)...[0m
[1;94m[*] [0mFuzzing test case #4 (11 total, 0 uniq crashes found)...[0m
